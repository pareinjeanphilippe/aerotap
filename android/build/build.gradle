// Gradle build config for Godot Engine's Android port.
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

apply from: 'config.gradle'

allprojects {
    repositories {
        // Dépôts autorisés par F-Droid
        google()
        mavenCentral()

        // Charge les AAR locaux (à déposer dans android/build/libs/…)
        flatDir {
            dirs 'libs', 'libs/debug', 'libs/dev', 'libs/release'
        }

        // ❌ SUPPRIMÉ: gradlePluginPortal / plugins.gradle.org / sonatype snapshots
        // ❌ SUPPRIMÉ: boucle maven { url repoUrl } des plugins Godot
    }
}

configurations {
    devImplementation {}
    monoImplementation {}
}

dependencies {
    implementation "androidx.fragment:fragment:$versions.fragmentVersion"
    implementation "androidx.core:core-splashscreen:$versions.splashscreenVersion"

    if (rootProject.findProject(":lib")) {
        implementation project(":lib")
    } else if (rootProject.findProject(":godot:lib")) {
        implementation project(":godot:lib")
    } else {
        // Godot gradle build mode: on charge les AAR locaux
        debugImplementation   fileTree(dir: 'libs/debug',   include: ['**/*.jar', '*.aar'])
        devImplementation     fileTree(dir: 'libs/dev',     include: ['**/*.jar', '*.aar'])
        releaseImplementation fileTree(dir: 'libs/release', include: ['**/*.jar', '*.aar'])
    }

    // Godot user plugins remote dependencies (ok si vides)
    String[] remoteDeps = getGodotPluginsRemoteBinaries()
    if (remoteDeps != null && remoteDeps.size() > 0) {
        for (String dep : remoteDeps) {
            implementation dep
        }
    }

    // Godot user plugins local dependencies
    String[] pluginsBinaries = getGodotPluginsLocalBinaries()
    if (pluginsBinaries != null && pluginsBinaries.size() > 0) {
        implementation files(pluginsBinaries)
    }

    // Automatically pick up local dependencies in res://addons
    String addonsDirectory = getAddonsDirectory()
    if (addonsDirectory != null && !addonsDirectory.isBlank()) {
        implementation fileTree(dir: "$addonsDirectory", include: ['*.jar', '*.aar'])
    }

    // .NET dependencies
    String jar = '../../../../modules/mono/thirdparty/libSystem.Security.Cryptography.Native.Android.jar'
    if (file(jar).exists()) {
        monoImplementation files(jar)
    }
}

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    ndkVersion versions.ndkVersion

    compileOptions {
        sourceCompatibility versions.javaVersion
        targetCompatibility versions.javaVersion
    }

    kotlinOptions {
        jvmTarget = versions.javaVersion
    }

    assetPacks = [":assetPackInstallTime"]

    namespace = 'com.godot.game'

    defaultConfig {
        aaptOptions {
            ignoreAssetsPattern "!.svn:!.git:!.gitignore:!.ds_store:!*.scc:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
        }

        ndk {
            debugSymbolLevel 'NONE'
            String[] export_abi_list = getExportEnabledABIs()
            abiFilters export_abi_list
        }

        applicationId getExportPackageName()
        versionCode getExportVersionCode()
        versionName getExportVersionName()
        minSdkVersion getExportMinSdkVersion()
        targetSdkVersion getExportTargetSdkVersion()

        missingDimensionStrategy 'products', 'template'
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'UnusedResources'
    }

    ndkVersion versions.ndkVersion

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'

        if (shouldNotStrip()) {
            jniLibs { keepDebugSymbols += '**/*.so' }
        }

        jniLibs {
            useLegacyPackaging shouldUseLegacyPackaging()
        }

        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }

    signingConfigs {
        debug {
            if (hasCustomDebugKeystore()) {
                storeFile new File(getDebugKeystoreFile())
                storePassword getDebugKeystorePassword()
                keyAlias getDebugKeyAlias()
                keyPassword getDebugKeystorePassword()
            }
        }
        release {
            File keystoreFile = new File(getReleaseKeystoreFile())
            if (keystoreFile.isFile()) {
                storeFile keystoreFile
                storePassword getReleaseKeystorePassword()
                keyAlias getReleaseKeyAlias()
                keyPassword getReleaseKeystorePassword()
            }
        }
    }

    buildFeatures { buildConfig = true }

    buildTypes {
        debug   { zipAlignEnabled shouldZipAlign(); signingConfig shouldSign() ? signingConfigs.debug   : null }
        dev     { initWith debug; zipAlignEnabled shouldZipAlign(); signingConfig shouldSign() ? signingConfigs.debug : null }
        release { zipAlignEnabled shouldZipAlign(); signingConfig shouldSign() ? signingConfigs.release : null }
    }

    flavorDimensions 'edition'
    productFlavors { standard { getIsDefault().set(true) } mono {} }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            aidl.srcDirs = ['aidl']
            assets.srcDirs = ['assets']
        }
        debug.jniLibs.srcDirs = ['libs/debug', 'libs/debug/vulkan_validation_layers']
        dev.jniLibs.srcDirs = ['libs/dev']
        release.jniLibs.srcDirs = ['libs/release']
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            String filenameSuffix = variant.flavorName == "mono" ? variant.name : variant.buildType.name
            output.outputFileName = "android_${filenameSuffix}.apk"
        }
    }
}

task copyAndRenameBinary(type: Copy) {
    doNotTrackState("No need for up-to-date checks for the copy-and-rename operation")

    String exportPath = getExportPath()
    String exportFilename = getExportFilename()
    String exportEdition = getExportEdition()
    String exportBuildType = getExportBuildType()
    String exportBuildTypeCapitalized = exportBuildType.capitalize()
    String exportFormat = getExportFormat()

    boolean isAab = exportFormat == "aab"
    boolean isMono = exportEdition == "mono"
    String filenameSuffix = isAab ? "${exportEdition}-${exportBuildType}" : exportBuildType
    if (isMono) {
        filenameSuffix = isAab ? "${exportEdition}-${exportBuildType}" : "${exportEdition}${exportBuildTypeCapitalized}"
    }

    String sourceFilename = isAab ? "build-${filenameSuffix}.aab" : "android_${filenameSuffix}.apk"
    String sourceFilepath = isAab ? "$buildDir/outputs/bundle/${exportEdition}${exportBuildTypeCapitalized}/$sourceFilename" : "$buildDir/outputs/apk/$exportEdition/$exportBuildType/$sourceFilename"

    from sourceFilepath
    into exportPath
    rename sourceFilename, exportFilename
}

task validateJavaVersion {
    if (!JavaVersion.current().isCompatibleWith(versions.javaVersion)) {
        throw new GradleException("Invalid Java version ${JavaVersion.current()}. Version ${versions.javaVersion} is the minimum supported Java version for Godot gradle builds.")
    }
}

if (rootProject.tasks.findByPath("copyDebugAARToAppModule") != null) {
    preBuild.mustRunAfter(rootProject.tasks.named("copyDebugAARToAppModule"))
}
if (rootProject.tasks.findByPath("copyDevAARToAppModule") != null) {
    preBuild.mustRunAfter(rootProject.tasks.named("copyDevAARToAppModule"))
}
if (rootProject.tasks.findByPath("copyReleaseAARToAppModule") != null) {
    preBuild.mustRunAfter(rootProject.tasks.named("copyReleaseAARToAppModule"))
}
